/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef ___HOME_PAUL_DOCUMENTS_LIBGATT_MASTER_BUILD_DBUS_ORG_BLUEZ_AGENTMANAGER1_H__
#define ___HOME_PAUL_DOCUMENTS_LIBGATT_MASTER_BUILD_DBUS_ORG_BLUEZ_AGENTMANAGER1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.AgentManager1 */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1 (org_bluez_agent_manager1_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1, OrgBluezAgentManager1))
#define IS_ORG_BLUEZ_AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1))
#define ORG_BLUEZ_AGENT_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1, OrgBluezAgentManager1Iface))

struct _OrgBluezAgentManager1;
typedef struct _OrgBluezAgentManager1 OrgBluezAgentManager1;
typedef struct _OrgBluezAgentManager1Iface OrgBluezAgentManager1Iface;

struct _OrgBluezAgentManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent,
    const gchar *arg_capability);

  gboolean (*handle_request_default_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

  gboolean (*handle_unregister_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

};

GType org_bluez_agent_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_agent_manager1_interface_info (void);
guint org_bluez_agent_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_agent_manager1_complete_register_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent_manager1_complete_unregister_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent_manager1_complete_request_default_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_agent_manager1_call_register_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_register_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_register_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent_manager1_call_unregister_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_unregister_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_unregister_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent_manager1_call_request_default_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_request_default_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_request_default_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY (org_bluez_agent_manager1_proxy_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1Proxy))
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1ProxyClass))
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1ProxyClass))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY))

typedef struct _OrgBluezAgentManager1Proxy OrgBluezAgentManager1Proxy;
typedef struct _OrgBluezAgentManager1ProxyClass OrgBluezAgentManager1ProxyClass;
typedef struct _OrgBluezAgentManager1ProxyPrivate OrgBluezAgentManager1ProxyPrivate;

struct _OrgBluezAgentManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezAgentManager1ProxyPrivate *priv;
};

struct _OrgBluezAgentManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_agent_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgentManager1Proxy, g_object_unref)
#endif

void org_bluez_agent_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_agent_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON (org_bluez_agent_manager1_skeleton_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1Skeleton))
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1SkeletonClass))
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1SkeletonClass))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON))

typedef struct _OrgBluezAgentManager1Skeleton OrgBluezAgentManager1Skeleton;
typedef struct _OrgBluezAgentManager1SkeletonClass OrgBluezAgentManager1SkeletonClass;
typedef struct _OrgBluezAgentManager1SkeletonPrivate OrgBluezAgentManager1SkeletonPrivate;

struct _OrgBluezAgentManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezAgentManager1SkeletonPrivate *priv;
};

struct _OrgBluezAgentManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_agent_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgentManager1Skeleton, g_object_unref)
#endif

OrgBluezAgentManager1 *org_bluez_agent_manager1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Agent1 */

#define TYPE_ORG_BLUEZ_AGENT1 (org_bluez_agent1_get_type ())
#define ORG_BLUEZ_AGENT1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT1, OrgBluezAgent1))
#define IS_ORG_BLUEZ_AGENT1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT1))
#define ORG_BLUEZ_AGENT1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_AGENT1, OrgBluezAgent1Iface))

struct _OrgBluezAgent1;
typedef struct _OrgBluezAgent1 OrgBluezAgent1;
typedef struct _OrgBluezAgent1Iface OrgBluezAgent1Iface;

struct _OrgBluezAgent1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_authorize) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    const gchar *arg_uuid);

  gboolean (*handle_cancel) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_confirm_mode_change) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_mode);

  gboolean (*handle_display_passkey) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    guint arg_passkey);

  gboolean (*handle_release) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_confirmation) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    guint arg_passkey);

  gboolean (*handle_request_passkey) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_request_pin_code) (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

};

GType org_bluez_agent1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_agent1_interface_info (void);
guint org_bluez_agent1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_agent1_complete_authorize (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_request_pin_code (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_bluez_agent1_complete_display_passkey (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_release (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_cancel (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_request_confirmation (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_confirm_mode_change (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent1_complete_request_passkey (
    OrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);



/* D-Bus method calls: */
void org_bluez_agent1_call_authorize (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_authorize_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_authorize_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_request_pin_code (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_request_pin_code_finish (
    OrgBluezAgent1 *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_request_pin_code_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_display_passkey (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_display_passkey_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_display_passkey_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_release (
    OrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_release_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_release_sync (
    OrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_cancel (
    OrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_cancel_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_cancel_sync (
    OrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_request_confirmation (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_request_confirmation_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_request_confirmation_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_confirm_mode_change (
    OrgBluezAgent1 *proxy,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_confirm_mode_change_finish (
    OrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_confirm_mode_change_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent1_call_request_passkey (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent1_call_request_passkey_finish (
    OrgBluezAgent1 *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent1_call_request_passkey_sync (
    OrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_AGENT1_PROXY (org_bluez_agent1_proxy_get_type ())
#define ORG_BLUEZ_AGENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT1_PROXY, OrgBluezAgent1Proxy))
#define ORG_BLUEZ_AGENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT1_PROXY, OrgBluezAgent1ProxyClass))
#define ORG_BLUEZ_AGENT1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT1_PROXY, OrgBluezAgent1ProxyClass))
#define IS_ORG_BLUEZ_AGENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT1_PROXY))
#define IS_ORG_BLUEZ_AGENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT1_PROXY))

typedef struct _OrgBluezAgent1Proxy OrgBluezAgent1Proxy;
typedef struct _OrgBluezAgent1ProxyClass OrgBluezAgent1ProxyClass;
typedef struct _OrgBluezAgent1ProxyPrivate OrgBluezAgent1ProxyPrivate;

struct _OrgBluezAgent1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezAgent1ProxyPrivate *priv;
};

struct _OrgBluezAgent1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_agent1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgent1Proxy, g_object_unref)
#endif

void org_bluez_agent1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgent1 *org_bluez_agent1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgent1 *org_bluez_agent1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_agent1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgent1 *org_bluez_agent1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgent1 *org_bluez_agent1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_AGENT1_SKELETON (org_bluez_agent1_skeleton_get_type ())
#define ORG_BLUEZ_AGENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT1_SKELETON, OrgBluezAgent1Skeleton))
#define ORG_BLUEZ_AGENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT1_SKELETON, OrgBluezAgent1SkeletonClass))
#define ORG_BLUEZ_AGENT1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT1_SKELETON, OrgBluezAgent1SkeletonClass))
#define IS_ORG_BLUEZ_AGENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT1_SKELETON))
#define IS_ORG_BLUEZ_AGENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT1_SKELETON))

typedef struct _OrgBluezAgent1Skeleton OrgBluezAgent1Skeleton;
typedef struct _OrgBluezAgent1SkeletonClass OrgBluezAgent1SkeletonClass;
typedef struct _OrgBluezAgent1SkeletonPrivate OrgBluezAgent1SkeletonPrivate;

struct _OrgBluezAgent1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezAgent1SkeletonPrivate *priv;
};

struct _OrgBluezAgent1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_agent1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgent1Skeleton, g_object_unref)
#endif

OrgBluezAgent1 *org_bluez_agent1_skeleton_new (void);


G_END_DECLS

#endif /* ___HOME_PAUL_DOCUMENTS_LIBGATT_MASTER_BUILD_DBUS_ORG_BLUEZ_AGENTMANAGER1_H__ */
