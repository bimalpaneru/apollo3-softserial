/**
 * On an Artemis the float values are NOT correctly printed.
 *
 * Installation instruction for printing float number correctly
 * on V2.x.x library of Apollo3
 *
 * Version 1.0 / November 2022 / Paulvha
 * - initial version
 *
 * *********************************************************************
 * Ubuntu/Linux
 * *********************************************************************
 * 1) Go to directory :
 *
 * ~/.arduino15/packages/SparkFun/hardware/apollo3/2.2.1/cores/arduino/mbed-bridge/core-implement
 *
 * 2) copy the complete printf-directory as a sub-folder to core-implement
 *
 * printf:
 * -----printf.c
 * -----printf.h
 * -----install.txt
 *
 *
 * 3) edit HardwareSerial.cpp
 *
 * 4) change
 *
  int UART::printf(const char *format, ...){

    va_list args;
    va_start(args, format);
    const int space = vsnprintf(NULL, 0, format, args) + 1;
    char buf[space];
    memset(buf, 0x00, space);
    vsnprintf(buf, space, format, args);
    va_end(args);

    int size = strlen(buf);
    write(buf, size);
    return size;
  }
 *
 * to
 *
  int UART::printf(const char *format, ...){
    va_list va;
    va_start(va, format);
    const int space = Artemis_printf(0, (size_t)-1, format, va) + 1;
    char buf[space];
    memset(buf, 0x00, space);
    int size = Artemis_printf(buf, space, format, va);
    va_end(va);

    write(buf, size);
    return size;
  }
 *
 *
 * 5) cd ../core-api/api
 *
 * 6) edit HardwareSerial.h
 * 7) add
  #include <../core-implement/printf/printf.h>

  so you get :
  #include <inttypes.h>
  #include "Stream.h"
  #include <../core-implement/printf/printf.h>
 *
 *
 *********************************************************************
 * Windows
 *********************************************************************
 * 1) Go to directory :
 *
 * <userdir>\AppData\Local\Arduino15\packages\Sparkfun\hardware\apollo3\2.2.1\cores\arduino\mbed-bridge\core-implement
 *
 * 2) copy the complete printf-directory as a sub-folder to core-implement
 *
 *  * printf:
 * -----printf.c
 * -----printf.h
 * -----install.txt
 *
 * 3) edit HardwareSerial.cpp
 *
 * 4) change
 *
  int UART::printf(const char *format, ...){

    va_list args;
    va_start(args, format);
    const int space = vsnprintf(NULL, 0, format, args) + 1;
    char buf[space];
    memset(buf, 0x00, space);
    vsnprintf(buf, space, format, args);
    va_end(args);

    int size = strlen(buf);
    write(buf, size);
    return size;
  }
 *
 * to
 *
  int UART::printf(const char *format, ...){
    va_list va;
    va_start(va, format);
    const int space = Artemis_printf(0, (size_t)-1, format, va) + 1;
    char buf[space];
    memset(buf, 0x00, space);
    int size = Artemis_printf(buf, space, format, va);
    va_end(va);

    write(buf, size);
    return size;
  }
 *
 * 5) cd ..\core-api\api
 *
 * 6) edit HardwareSerial.h
 * 7) add
  #include <..\core-implement\printf\printf.h>

  so you get :
  #include <inttypes.h>
  #include "Stream.h"
  #include <..\core-implement\printf\printf.h>
 *
 ******************************************************************
 *  USAGE
 ******************************************************************/
 // The following 3 calls are added :

/**
 * Printf implementation for Artemis
 *
 * @param buffer A pointer to the buffer where to store the formatted string. MUST be big enough to store the output!
 *               if zero, only the expected count of characters is returned
 * @param maxlen : maximum length allowed in the buffer.
 * @param format A string that specifies the format of the output
 * @param va A value identifying a variable arguments list
 * @return The number of characters that are  WRITTEN into the buffer (or WILL if buffer is zero), not counting the terminating null character
 */
//int Artemis_printf(char* buffer, const size_t maxlen, const char* format, va_list va);
//int Artemis_sprintf(char* buffer, const char* format, ...) ATTR_PRINTF(2, 3);

/**
 * Artemis_dtostrf() may be the function you need if you have a floating point value that you need to convert to a string
 *
 * @param val   : Floating point value to convert
 * @param width : Minimum filed width
 * @param prec  : Number of digits after the decimal point
 * @param sout  : Character buffer to store the result
 * @return      : provided pointer to sout.
 *
 * If you set the  minimum field width to 6, and you convert a floating point value that has less than 6 digits, then spaces will be
 * added before the number starts. And for counting purposes, the “.” decimal point and the “-” negative sign count as spaces too.
 *
 * For Prec : If the floating point value you convert to a string has more digits after the decimal point than the number specified in the
 * precision, then it will be cut off and rounded accordingly in the output string.
 * If you pass a number with fewer digits after the decimal point, it will add trailing zeros to the number.
 *
 * When setting the sout consider
 *  - What the biggest number might ever be
 *  - Size must include space for the “.” and the possible “-” sign
 *  - Add 1 for the null-terminating character “\0”
 *
 */

//char *Artemis_dtostrf (double val, signed char width, unsigned char prec, char *sout);

/*****************************************************************************************
 * This sketch will demonstrate the issue (and solution) for printing floating value
 *
 * The problem:
 * In the Apollo3 V2 library the printf function is embedded from Mbed. As part of creating the pre-compiled Mbed-archive
 * only a limited printf is included. This limited function has a number of issues
 */

void setup() {

  char Sbuf[20];
  Serial.begin(115200);
  delay(1000);
  Serial.println("Test floating point display");

  // example
  float a = 5.02131234;

  // the standard NONE changed version will provide %2.4f with this call
  sprintf(Sbuf,"%2.4f",a);
  Serial.printf("With standard (s)printf: %s\n", Sbuf);

  // this is the relying on the patched version of HardwareSerial.cpp
  // see the install.txt and this will show: 5.0213
  Serial.printf("With patched printf %2.4f\n", a);

  // this is the standard  dtostrf(), but that is using sprintf
  // Artemis_dtostrf() is using Artemis_sprintf it will show: 5.0213
  Serial.printf("Using Artemis_dtostrf %s", Artemis_dtostrf(a,2,4,Sbuf));
}

void loop() {
  // put your main code here, to run repeatedly:
}



